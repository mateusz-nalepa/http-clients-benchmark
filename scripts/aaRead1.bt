#define TARGET_PID 32405


kprobe:__x64_sys_recvfrom
/ pid == TARGET_PID /
{
    @start[tid] = nsecs;
    @proc_name[tid] = comm;
    @fd[tid] = arg0;
    @buf[tid] = arg1;
}


kretprobe:__x64_sys_recvfrom
/ @start[tid] / //&& retval > 0 /
{
    $duration = nsecs - @start[tid];

        if (@proc_name[tid] != "reactor-http-ep") {
            //printf("{\"RECVFROMthread\": \"%s\", \"recv_duration_ns\": %lld, \"fd\": %d, \"bytes_received\": %d}\n", @proc_name[tid], $duration, @fd[tid], retval);
        }

    if ((strncmp(@proc_name[tid], "l", 0) == 0) ) {
        @czas_czytania = hist($duration);
    }

    delete(@start[tid]);
    delete(@fd[tid]);
    delete(@buf[tid]);
}

tracepoint:syscalls:sys_enter_epoll_wait
/ pid == TARGET_PID /
{
    @start[tid] = nsecs;
    @proc_name[tid] = comm;
    @xdTimeout[tid] = args->timeout;
    @xdMaxEvents[tid] = args->maxevents;
}

tracepoint:syscalls:sys_exit_epoll_wait
/ @start[tid] && pid == TARGET_PID /
{
    $duration = nsecs - @start[tid];
    $retval = args->ret;
    if ($retval != 0 && $retval != 1 && @proc_name[tid] != "reactor-http-ep") {
        //printf("{ \"EEEEEEEEEEEPOLL_WAIT_pid\": %d, \"process\": \"%s\", \"event\": \"epoll_wait\", \"maxEvents\": \"%d\", \"timeout\": \"%d\", \"result\": \"%d\", \"duration_ns\": %lld }\n", pid, @proc_name[tid], @xdMaxEvents[tid],  @xdTimeout[tid], $retval, $duration);
    }
    delete(@start[tid]);
    delete(@proc_name[tid]);
    delete(@xdTimeout[tid]);
    delete(@xdMaxEvents[tid]);
}


kprobe:mutex_lock
/ pid == TARGET_PID /
{
    @start[tid] = nsecs;
        @proc_name[tid] = comm;

}

kprobe:mutex_unlock
/ @start[tid] /
{
    $duration = nsecs - @start[tid];
    //printf("PROCNAME: %s, mutex locked for %lld ns\n", @proc_name[tid], $duration);
    //if ((strncmp(@proc_name[tid], "l", 0) == 0) ) {
        @czas_lockow = hist($duration);
    //}
    delete(@start[tid]);
    delete(@proc_name[tid]);
}


tracepoint:sched:sched_switch
/ pid == TARGET_PID /
{
    @start[tid] = nsecs;
    @proc_name[tid] = comm;
}

tracepoint:sched:sched_switch
/ @start[tid] && pid == TARGET_PID /
{
    $duration = nsecs - @start[tid];
    //if ($retval != 0 && $retval != 1 && @proc_name[tid] != "reactor-http-ep") {
        //printf("{ \"SWITCH_pid\": %d, \"process\": \"%s\", \"duration_ns\": %lld }\n", pid, @proc_name[tid],  $duration);
    //}
    //if ((strncmp(@proc_name[tid], "l", 0) == 0) ) {
        @czas_switcha = hist($duration);
    //}
    delete(@start[tid]);
    delete(@proc_name[tid]);
}

END {
    printf("Czas switcha\n");
    print(@czas_switcha);

        printf("\nCzas czytania\n");
        print(@czas_czytania);

        printf("\nCzas lockow\n");
        print(@czas_lockow);
}
